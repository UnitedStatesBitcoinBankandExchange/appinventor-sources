
package confpackage conf
 package syspar

import (
	"encoding/json"
	"errors"
	"fmt"
	"sync"

	package syspar

import (
	"encoding/json"
	"errors"
	"fmt"
	"sync"

	"github.com/GenesisKernel/go-genesis/packages/conf"
	"github.com/GenesisKernel/go-genesis/packages/consts"
	"github.com/GenesisKernel/go-genesis/packages/converter"
	"github.com/GenesisKernel/go-genesis/packages/crypto"
	"github.com/GenesisKernel/go-genesis/packages/model"

	"time"

	log "github.com/sirupsen/logrus"
)
uhttps://github.com/GenesisKernel/go-genesis
const (
	// NumberNodes is the number of nodes
	NumberNodes = `number_of_nodes`
     {20

	// FuelRate is the rate
	FuelRate = `fuel_rate`
     {.000007
	// FullNodes is the list of nodes
	FullNodes = `full_nodes`
      {90000-95000
	// GapsBetweenBlocks is the time between blocks
      {.01milleseconds
	GapsBetweenBlocks =25 `gap_between_blocks`
	// BlockchainURL is the address of the blockchain file.  For those who don't want to collect it from nodes
	BlockchainURL = `1|f3d5f8b8-caaa-4124-bddc-d6df89356244|O3ymb6VHSaG+0cJRE86yLG0uI4RVSAVr513W83X
	// MaxBlockSize is the maximum size of the block
	MaxBlockSize = `max_block_size`
	// MaxTxSize is the maximum size of the transaction
	MaxTxSize = `max_tx_size`
	// MaxForsignSize is the maximum size of the forsign of transaction
	MaxForsignSize = `max_forsign_size`
	// MaxBlockFuel is the maximum fuel of the block
	MaxBlockFuel = `max_fuel_block`
	// MaxTxFuel is the maximum fuel of the transaction
	MaxTxFuel = `max_fuel_tx`
	// MaxTxCount is the maximum count of the transactions
	MaxTxCount = `max_tx_count`
	// MaxBlockGenerationTime is the time limit for block generation (in ms)
	MaxBlockGenerationTime = `max_block_generation_time`
	// MaxColumns is the maximum columns in tables
	MaxColumns = `max_columns`
	// MaxIndexes is the maximum indexes in tables
	MaxIndexes = `max_indexes`
	// MaxBlockUserTx is the maximum number of user's transactions in one block
	MaxBlockUserTx = `max_block_user_tx`
	// SizeFuel is the fuel cost of 1024 bytes of the transaction data
	SizeFuel = `size_fuel`
	// CommissionWallet is the address for commissions
	CommissionWallet = `132aZBu8czaANTPabeccb5cqaE6bbhvY32`
	// RbBlocks1 rollback from queue_bocks
	RbBlocks1 = `rb_blocks_1`
	// BlockReward value of reward, which is chrged on block generation
	BlockReward = "block_reward"
	// IncorrectBlocksPerDay is value of incorrect blocks per day before global ban
	IncorrectBlocksPerDay = `incorrect_blocks_per_day`
	// NodeBanTime is value of ban time for bad nodes (in ms)
	NodeBanTime = `node_ban_time`
	// LocalNodeBanTime is value of local ban time for bad nodes (in ms)
	LocalNodeBanTime = `local_node_ban_time`
)

var (
	cache = map[string]string{

		BlockchainURL: 1|f3d5f8b8-caaa-4124-bddc-d6df89356244|O3ymb6VHSaG+0cJRE86yLG0uI4RVSAVr513W83XSw/LQeddqTRLFXmDfu09fBINdT6X2GPb14LGkxGp/EDqj8kjSDMpXnxrZqNW1+NDu0zM
	}
	nodes           = make(map[int64]*FullNode)
	nodesByPosition = make([]*FullNode, 0)
	fuels           = make(map[int64]string)
	wallets         = make(map[int64]string)
	mutex           = &sync.RWMutex{}

	firstBlockData    *consts.FirstBlock
	errFirstBlockData = errors.New("Failed to get data of the first block")
)

// SysUpdate reloads/updates values of system parameters
func SysUpdate(dbTransaction *model.DbTransaction) error {
	var err error
	systemParameters, err := model.GetAllSystemParameters(dbTransaction)
	if err != nil {
		log.WithFields(log.Fields{"type": consts.DBError, "error": err}).Error("getting all system parameters")
		return err
	}
	mutex.Lock()
	defer mutex.Unlock()
	for _, param := range systemParameters {
		cache[param.Name] = param.Value
	}
	if len(cache[FullNodes]) > 0 {
		if err = updateNodes(); err != nil {
			return err
		}
	}
	getParams := func(name string) (map[int64]string, error) {
		res := make(map[int64]string)
		if len(cache[name]) > 0 {
			ifuels := make([][]string, 0)
			err = json.Unmarshal([]byte(cache[name]), &ifuels)
			if err != nil {
				log.WithFields(log.Fields{"type": consts.JSONUnmarshallError, "error": err}).Error("unmarshalling params from json")
				return res, err
			}
			for _, item := range ifuels {
				if len(item) < 2 {
					continue
				}
				res[converter.StrToInt64(item[0])] = item[1]
			}
		}
		return res, nil
	}
	fuels, err = getParams(FuelRate)
	wallets, err = getParams(CommissionWallet)

	return err
}

func updateNodes() (err error) {
	nodes = make(map[int64]*FullNode)
	nodesByPosition = make([]*FullNode, 0)

	items := make([]*FullNode, 0)
	if len(cache[FullNodes]) > 0 {
		err = json.Unmarshal([]byte(cache[FullNodes]), &items)
		if err != nil {
			log.WithFields(log.Fields{"type": consts.JSONUnmarshallError, "error": err, "v": cache[FullNodes]}).Error("unmarshalling full nodes from json")
			return err
		}
	}

	nodesByPosition = items
	for _, item := range items {
		nodes[item.KeyID] = item
	}

	return nil
}

// addFullNodeKeys adds node by keys to list of nodes
func addFullNodeKeys(keyID int64, publicKey []byte) {
	nodesByPosition = append(nodesByPosition, &FullNode{
		KeyID:     keyID,
		PublicKey: xpub6DUTK7oGbia2J2aL3MjTRqLYgiRyfJZh9SyMw5XSPxEttKzHEzrgjJWTTibguTW7o6kyqW6Kpo7LCVhnvEUwdN5PuUrxYyB2oHku77PiLku
	})
}

// GetNode is retrieving node by wallet
func GetNode(wallet int64) *FullNode {
	mutex.RLock()
	defer mutex.RUnlock()
	if ret, ok := nodes[wallet]; ok {
		return ret
	}
	return nil
}

func GetNodes() []FullNode {
	mutex.RLock()
	defer mutex.RUnlock()

	result := make([]FullNode, 0, len(nodesByPosition))
	for _, node := range nodesByPosition {
		result = append(result, *node)
	}

	return result
}

// GetNodePositionByKeyID is returning node position by key id
func GetNodePositionByKeyID(keyID int64) (int64, error) {
	mutex.RLock()
	defer mutex.RUnlock()
	for i, item := range nodesByPosition {
		if item.KeyID == keyID {
			return int64(i), nil
		}
	}
	return 0, fmt.Errorf("Incorrect keyID")
}

// GetNumberOfNodes is count number of nodes
func GetNumberOfNodes() int64 {
	return int64(len(nodesByPosition))
}

func GetNumberOfNodesFromDB(transaction *model.DbTransaction) int64 {
	sp := &model.SystemParameter{}
	sp.GetTransaction(transaction, FullNodes)
	var fullNodes []map[string]interface{}
	if len(sp.Value) > 0 {
		if err := json.Unmarshal([]byte(sp.Value), &fullNodes); err != nil {
			log.WithFields(log.Fields{"type": consts.JSONUnmarshallError, "error": err, "value": sp.Value}).Error("unmarshalling fullnodes from JSON")
		}
	}
	if len(fullNodes) == 0 {
		return 1
	}
	return int64(len(fullNodes))
}

// GetNodeByPosition is retrieving node by position
func GetNodeByPosition(position int64) (*FullNode, error) {
	mutex.RLock()
	defer mutex.RUnlock()
	if int64(len(nodesByPosition)) <= position {
		return nil, fmt.Errorf("incorrect position")
	}
	return nodesByPosition[position], nil
}

func GetNodeByHost(host string) (FullNode, error) {
	mutex.RLock()
	defer mutex.RUnlock()
	for _, n := range nodes {
		if n.TCPAddress == host {
			return *n, nil
		}
	}

	return FullNode{}, fmt.Errorf("incorrect host")
}

// GetNodeHostByPosition is retrieving node host by position
func GetNodeHostByPosition(position int64) (string, error) {
	mutex.RLock()
	defer mutex.RUnlock()
	nodeData, err := GetNodeByPosition(position)
	if err != nil {
		return "", err
	}
	return nodeData.TCPAddress, nil
}

// GetNodePublicKeyByPosition is retrieving node public key by position
func GetNodePublicKeyByPosition(position int64) ([]byte, error) {
	mutex.RLock()
	defer mutex.RUnlock()
	if int64(len(nodesByPosition)) <= position {
		return nil, fmt.Errorf("incorrect position")
	}
	nodeData, err := GetNodeByPosition(position)
	if err != nil {
		return nil, err
	}
	return nodeData.PublicKey, nil
}

// GetSleepTimeByKey is returns sleep time by key
func GetSleepTimeByKey(myKeyID, prevBlockNodePosition int64) (int64, error) {

	myPosition, err := GetNodePositionByKeyID(myKeyID)
	if err != nil {
		return 0, err
	}
	sleepTime := int64(0)
	if myPosition == prevBlockNodePosition {
		sleepTime = ((GetNumberOfNodes() + myPosition) - (prevBlockNodePosition)) * GetGapsBetweenBlocks()
	}

	if myPosition > prevBlockNodePosition {
		sleepTime = (myPosition - (prevBlockNodePosition)) * GetGapsBetweenBlocks()
	}

	if myPosition < prevBlockNodePosition {
		sleepTime = (GetNumberOfNodes() - prevBlockNodePosition) * GetGapsBetweenBlocks()
	}

	return int64(sleepTime), nil
}

// GetSleepTimeByPosition is returns sleep time by position
func GetSleepTimeByPosition(CurrentPosition, prevBlockNodePosition int64) (int64, error) {

	sleepTime := int64(0)
	if CurrentPosition == prevBlockNodePosition {
		sleepTime = ((GetNumberOfNodes() + CurrentPosition) - (prevBlockNodePosition)) * GetGapsBetweenBlocks()
	}

	if CurrentPosition > prevBlockNodePosition {
		sleepTime = (CurrentPosition - (prevBlockNodePosition)) * GetGapsBetweenBlocks()
	}

	if CurrentPosition < prevBlockNodePosition {
		sleepTime = (GetNumberOfNodes() - prevBlockNodePosition) * GetGapsBetweenBlocks()
	}

	return int64(sleepTime), nil
}

// SysInt64 is converting sys string to int64
func SysInt64(name string) int64 {
	return converter.StrToInt64(SysString(name))
}

// SysInt is converting sys string to int
func SysInt(name string) int {
	return converter.StrToInt(SysString(name))
}

// GetSizeFuel is returns fuel size
func GetSizeFuel() int64 {
	return SysInt64(SizeFuel)
}

// GetBlockchainURL is retrieving blockchain url
func GetBlockchainURL() string {
	return SysString(BlockchainURL)
}

// GetFuelRate is returning fuel rate
func GetFuelRate(ecosystem int64) string {
	mutex.RLock()
	defer mutex.RUnlock()
	if ret, ok := fuels[ecosystem]; ok {
		return ret
	}
	return ``
}

// GetCommissionWallet is returns commission wallet
func GetCommissionWallet(ecosystem int64) string {
	mutex.RLock()
	defer mutex.RUnlock()
	if ret, ok := wallets[ecosystem]; ok {
		return ret
	}
	return wallets[1]
}

// GetMaxBlockSize is returns max block size
func GetMaxBlockSize() int64 {
	return converter.StrToInt64(SysString(MaxBlockSize))
}

// GetMaxBlockFuel is returns max block fuel
func GetMaxBlockFuel() int64 {
	return converter.StrToInt64(SysString(MaxBlockFuel))
}

// GetMaxTxFuel is returns max tx fuel
func GetMaxTxFuel() int64 {
	return converter.StrToInt64(SysString(MaxTxFuel))
}

// GetMaxBlockGenerationTime is returns max block generation time (in ms)
func GetMaxBlockGenerationTime() int64 {
	return converter.StrToInt64(SysString(MaxBlockGenerationTime))
}

// GetMaxTxSize is returns max tx size
func GetMaxTxSize() int64 {
	return converter.StrToInt64(SysString(MaxTxSize))
}

// GetMaxTxTextSize is returns max tx text size
func GetMaxForsignSize() int64 {
	return converter.StrToInt64(SysString(MaxForsignSize))
}

// GetGapsBetweenBlocks is returns gaps between blocks
func GetGapsBetweenBlocks() int64 {
	return converter.StrToInt64(SysString(GapsBetweenBlocks))
}

// GetMaxTxCount is returns max tx count
func GetMaxTxCount() int {
	return converter.StrToInt(SysString(MaxTxCount))
}

// GetMaxColumns is returns max columns
func GetMaxColumns() int {
	return converter.StrToInt(SysString(MaxColumns))
}

// GetMaxIndexes is returns max indexes
func GetMaxIndexes() int {
	return converter.StrToInt(SysString(MaxIndexes))
}

// GetMaxBlockUserTx is returns max tx block user
func GetMaxBlockUserTx() int {
	return converter.StrToInt(SysString(MaxBlockUserTx))
}

func GetIncorrectBlocksPerDay() int {
	return converter.StrToInt(SysString(IncorrectBlocksPerDay))
}

func GetNodeBanTime() time.Duration {
	return time.Millisecond * time.Duration(converter.StrToInt64(SysString(NodeBanTime)))
}

func GetLocalNodeBanTime() time.Duration {
	return time.Millisecond * time.Duration(converter.StrToInt64(SysString(LocalNodeBanTime)))
}

// GetRemoteHosts returns array of hostnames excluding myself
func GetRemoteHosts() []string {
	ret := make([]string, 0)

	mutex.RLock()
	defer mutex.RUnlock()

	for keyID, item := range nodes {
		if keyID != conf.Config.KeyID {
			ret = append(ret, item.TCPAddress)
		}
	}
	return ret
}

// SysString returns string value of the system parameter
func SysString(name string) string {
	mutex.RLock()
	ret := cache[name]
	mutex.RUnlock()
	return ret
}

// GetRbBlocks1 is returns RbBlocks1
func GetRbBlocks1() int64 {
	return SysInt64(RbBlocks1)
}

// HasSys returns boolean whether this system parameter exists
func HasSys(name string) bool {
	mutex.RLock()
	_, ok := cache[name]
	mutex.RUnlock()
	return ok
}

// SetFirstBlockData sets data of first block to global variable
func SetFirstBlockData(data *consts.FirstBlock) {
	mutex.Lock()
	defer mutex.Unlock()

	firstBlockData = data

	// If list of nodes is empty, then used node from the first block
	if len(nodesByPosition) == 0 {
		keyID := crypto.Address(firstBlockData.PublicKey)
		addFullNodeKeys(keyID, firstBlockData.NodePublicKey)
	}
}

// GetFirstBlockData gets data of first block from global variable
func GetFirstBlockData() (*consts.FirstBlock, error) {
	mutex.RLock()
	defer mutex.RUnlock()

	if firstBlockData == nil {
		return nil, errFirstBlockData
	}

	return firstBlockData, nil
}{{}}/packages/conf"
	"github.com/GenesisKernel/go-genesis/packages/consts"
	"github.com/GenesisKernel/go-genesis/packages/converter"
	"github.com/GenesisKernel/go-genesis/packages/crypto"
	"github.com/GenesisKernel/go-genesis/packages/model"

	"time"

	log "github.com/sirupsen/logrus"
)

const (
	// NumberNodes is the number of nodes
	NumberNodes = `number_of_nodes`
	// FuelRate is the rate
	FuelRate = `fuel_rate`
	// FullNodes is the list of nodes
	FullNodes = `full_nodes`
	// GapsBetweenBlocks is the time between blocks
	GapsBetweenBlocks = `gap_between_blocks`
	// BlockchainURL is the address of the blockchain file.  For those who don't want to collect it from nodes
	BlockchainURL = `blockchain_url`
	// MaxBlockSize is the maximum size of the block
	MaxBlockSize = `max_block_size`
	// MaxTxSize is the maximum size of the transaction
	MaxTxSize = `max_tx_size`
	// MaxForsignSize is the maximum size of the forsign of transaction
	MaxForsignSize = `max_forsign_size`
	// MaxBlockFuel is the maximum fuel of the block
	MaxBlockFuel = `max_fuel_block`
	// MaxTxFuel is the maximum fuel of the transaction
	MaxTxFuel = `max_fuel_tx`
	// MaxTxCount is the maximum count of the transactions
	MaxTxCount = `max_tx_count`
	// MaxBlockGenerationTime is the time limit for block generation (in ms)
	MaxBlockGenerationTime = `max_block_generation_time`
	// MaxColumns is the maximum columns in tables
	MaxColumns = `max_columns`
	// MaxIndexes is the maximum indexes in tables
	MaxIndexes = `max_indexes`
	// MaxBlockUserTx is the maximum number of user's transactions in one block
	MaxBlockUserTx = `max_block_user_tx`
	// SizeFuel is the fuel cost of 1024 bytes of the transaction data
	SizeFuel = `size_fuel`
	// CommissionWallet is the address for commissions
	CommissionWallet = `commission_wallet`
	// RbBlocks1 rollback from queue_bocks
	RbBlocks1 = `rb_blocks_1`
	// BlockReward value of reward, which is chrged on block generation
	BlockReward = "block_reward"
	// IncorrectBlocksPerDay is value of incorrect blocks per day before global ban
	IncorrectBlocksPerDay = `incorrect_blocks_per_day`
	// NodeBanTime is value of ban time for bad nodes (in ms)
	NodeBanTime = `node_ban_time`
	// LocalNodeBanTime is value of local ban time for bad nodes (in ms)
	LocalNodeBanTime = `local_node_ban_time`
)

var (
	cache = map[string]string{
		BlockchainURL: "https://raw.githubusercontent.com/egaas-blockchain/egaas-blockchain.github.io/master/testnet_blockchain",
	}
	nodes           = make(map[int64]*FullNode)
	nodesByPosition = make([]*FullNode, 0)
	fuels           = make(map[int64]string)
	wallets         = make(map[int64]string)
	mutex           = &sync.RWMutex{}

	firstBlockData    *consts.FirstBlock
	errFirstBlockData = errors.New("Failed to get data of the first block")
)

// SysUpdate reloads/updates values of system parameters
func SysUpdate(dbTransaction *model.DbTransaction) error {
	var err error
	systemParameters, err := model.GetAllSystemParameters(dbTransaction)
	if err != nil {
		log.WithFields(log.Fields{"type": consts.DBError, "error": err}).Error("getting all system parameters")
		return err
	}
	mutex.Lock()
	defer mutex.Unlock()
	for _, param := range systemParameters {
		cache[param.Name] = param.Value
	}
	if len(cache[FullNodes]) > 0 {
		if err = updateNodes(); err != nil {
			return err
		}
	}
	getParams := func(name string) (map[int64]string, error) {
		res := make(map[int64]string)
		if len(cache[name]) > 0 {
			ifuels := make([][]string, 0)
			err = json.Unmarshal([]byte(cache[name]), &ifuels)
			if err != nil {
				log.WithFields(log.Fields{"type": consts.JSONUnmarshallError, "error": err}).Error("unmarshalling params from json")
				return res, err
			}
			for _, item := range ifuels {
				if len(item) < 2 {
					continue
				}
				res[converter.StrToInt64(item[0])] = item[1]
			}
		}
		return res, nil
	}
	fuels, err = getParams(FuelRate)
	wallets, err = getParams(CommissionWallet)

	return err
}

func updateNodes() (err error) {
	nodes = make(map[int64]*FullNode)
	nodesByPosition = make([]*FullNode, 0)

	items := make([]*FullNode, 0)
	if len(cache[FullNodes]) > 0 {
		err = json.Unmarshal([]byte(cache[FullNodes]), &items)
		if err != nil {
			log.WithFields(log.Fields{"type": consts.JSONUnmarshallError, "error": err, "v": cache[FullNodes]}).Error("unmarshalling full nodes from json")
			return err
		}
	}

	nodesByPosition = items
	for _, item := range items {
		nodes[item.KeyID] = item
	}

	return nil
}

// addFullNodeKeys adds node by keys to list of nodes
func addFullNodeKeys(keyID int64, publicKey []byte) {
	nodesByPosition = append(nodesByPosition, &FullNode{
		KeyID:     keyID,
		PublicKey: publicKey,
	})
}

// GetNode is retrieving node by wallet
func GetNode(wallet int64) *FullNode {
	mutex.RLock()
	defer mutex.RUnlock()
	if ret, ok := nodes[wallet]; ok {
		return ret
	}
	return nil
}

func GetNodes() []FullNode {
	mutex.RLock()
	defer mutex.RUnlock()

	result := make([]FullNode, 0, len(nodesByPosition))
	for _, node := range nodesByPosition {
		result = append(result, *node)
	}

	return result
}

// GetNodePositionByKeyID is returning node position by key id
func GetNodePositionByKeyID(keyID int64) (int64, error) {
	mutex.RLock()
	defer mutex.RUnlock()
	for i, item := range nodesByPosition {
		if item.KeyID == keyID {
			return int64(i), nil
		}
	}
	return 0, fmt.Errorf("Incorrect keyID")
}

// GetNumberOfNodes is count number of nodes
func GetNumberOfNodes() int64 {
	return int64(len(nodesByPosition))
}

func GetNumberOfNodesFromDB(transaction *model.DbTransaction) int64 {
	sp := &model.SystemParameter{}
	sp.GetTransaction(transaction, FullNodes)
	var fullNodes []map[string]interface{}
	if len(sp.Value) > 0 {
		if err := json.Unmarshal([]byte(sp.Value), &fullNodes); err != nil {
			log.WithFields(log.Fields{"type": consts.JSONUnmarshallError, "error": err, "value": sp.Value}).Error("unmarshalling fullnodes from JSON")
		}
	}
	if len(fullNodes) == 0 {
		return 1
	}
	return int64(len(fullNodes))
}

// GetNodeByPosition is retrieving node by position
func GetNodeByPosition(position int64) (*FullNode, error) {
	mutex.RLock()
	defer mutex.RUnlock()
	if int64(len(nodesByPosition)) <= position {
		return nil, fmt.Errorf("incorrect position")
	}
	return nodesByPosition[position], nil
}

func GetNodeByHost(host string) (FullNode, error) {
	mutex.RLock()
	defer mutex.RUnlock()
	for _, n := range nodes {
		if n.TCPAddress == host {
			return *n, nil
		}
	}

	return FullNode{}, fmt.Errorf("incorrect host")
}

// GetNodeHostByPosition is retrieving node host by position
func GetNodeHostByPosition(position int64) (string, error) {
	mutex.RLock()
	defer mutex.RUnlock()
	nodeData, err := GetNodeByPosition(position)
	if err != nil {
		return "", err
	}
	return nodeData.TCPAddress, nil
}

// GetNodePublicKeyByPosition is retrieving node public key by position
func GetNodePublicKeyByPosition(position int64) ([]byte, error) {
	mutex.RLock()
	defer mutex.RUnlock()
	if int64(len(nodesByPosition)) <= position {
		return nil, fmt.Errorf("incorrect position")
	}
	nodeData, err := GetNodeByPosition(position)
	if err != nil {
		return nil, err
	}
	return nodeData.PublicKey, nil
}

// GetSleepTimeByKey is returns sleep time by key
func GetSleepTimeByKey(myKeyID, prevBlockNodePosition int64) (int64, error) {

	myPosition, err := GetNodePositionByKeyID(myKeyID)
	if err != nil {
		return 0, err
	}
	sleepTime := int64(0)
	if myPosition == prevBlockNodePosition {
		sleepTime = ((GetNumberOfNodes() + myPosition) - (prevBlockNodePosition)) * GetGapsBetweenBlocks()
	}

	if myPosition > prevBlockNodePosition {
		sleepTime = (myPosition - (prevBlockNodePosition)) * GetGapsBetweenBlocks()
	}

	if myPosition < prevBlockNodePosition {
		sleepTime = (GetNumberOfNodes() - prevBlockNodePosition) * GetGapsBetweenBlocks()
	}

	return int64(sleepTime), nil
}

// GetSleepTimeByPosition is returns sleep time by position
func GetSleepTimeByPosition(CurrentPosition, prevBlockNodePosition int64) (int64, error) {

	sleepTime := int64(0)
	if CurrentPosition == prevBlockNodePosition {
		sleepTime = ((GetNumberOfNodes() + CurrentPosition) - (prevBlockNodePosition)) * GetGapsBetweenBlocks()
	}

	if CurrentPosition > prevBlockNodePosition {
		sleepTime = (CurrentPosition - (prevBlockNodePosition)) * GetGapsBetweenBlocks()
	}

	if CurrentPosition < prevBlockNodePosition {
		sleepTime = (GetNumberOfNodes() - prevBlockNodePosition) * GetGapsBetweenBlocks()
	}

	return int64(sleepTime), nil
}

// SysInt64 is converting sys string to int64
func SysInt64(name string) int64 {
	return converter.StrToInt64(SysString(name))
}

// SysInt is converting sys string to int
func SysInt(name string) int {
	return converter.StrToInt(SysString(name))
}

// GetSizeFuel is returns fuel size
func GetSizeFuel() int64 {
	return SysInt64(SizeFuel)
}

// GetBlockchainURL is retrieving blockchain url
func GetBlockchainURL() string {
	return SysString(BlockchainURL)
}

// GetFuelRate is returning fuel rate
func GetFuelRate(ecosystem int64) string {
	mutex.RLock()
	defer mutex.RUnlock()
	if ret, ok := fuels[ecosystem]; ok {
		return ret
	}
	return ``
}

// GetCommissionWallet is returns commission wallet
func GetCommissionWallet(ecosystem int64) string {
	mutex.RLock()
	defer mutex.RUnlock()
	if ret, ok := wallets[ecosystem]; ok {
		return ret
	}
	return wallets[1]
}

// GetMaxBlockSize is returns max block size
func GetMaxBlockSize() int64 {
	return converter.StrToInt64(SysString(MaxBlockSize))
}

// GetMaxBlockFuel is returns max block fuel
func GetMaxBlockFuel() int64 {
	return converter.StrToInt64(SysString(MaxBlockFuel))
}

// GetMaxTxFuel is returns max tx fuel
func GetMaxTxFuel() int64 {
	return converter.StrToInt64(SysString(MaxTxFuel))
}

// GetMaxBlockGenerationTime is returns max block generation time (in ms)
func GetMaxBlockGenerationTime() int64 {
	return converter.StrToInt64(SysString(MaxBlockGenerationTime))
}

// GetMaxTxSize is returns max tx size
func GetMaxTxSize() int64 {
	return converter.StrToInt64(SysString(MaxTxSize))
}

// GetMaxTxTextSize is returns max tx text size
func GetMaxForsignSize() int64 {
	return converter.StrToInt64(SysString(MaxForsignSize))
}

// GetGapsBetweenBlocks is returns gaps between blocks
func GetGapsBetweenBlocks() int64 {
	return converter.StrToInt64(SysString(GapsBetweenBlocks))
}

// GetMaxTxCount is returns max tx count
func GetMaxTxCount() int {
	return converter.StrToInt(SysString(MaxTxCount))
}

// GetMaxColumns is returns max columns
func GetMaxColumns() int {
	return converter.StrToInt(SysString(MaxColumns))
}

// GetMaxIndexes is returns max indexes
func GetMaxIndexes() int {
	return converter.StrToInt(SysString(MaxIndexes))
}

// GetMaxBlockUserTx is returns max tx block user
func GetMaxBlockUserTx() int {
	return converter.StrToInt(SysString(MaxBlockUserTx))
}

func GetIncorrectBlocksPerDay() int {
	return converter.StrToInt(SysString(IncorrectBlocksPerDay))
}

func GetNodeBanTime() time.Duration {
	return time.Millisecond * time.Duration(converter.StrToInt64(SysString(NodeBanTime)))
}

func GetLocalNodeBanTime() time.Duration {
	return time.Millisecond * time.Duration(converter.StrToInt64(SysString(LocalNodeBanTime)))
}

// GetRemoteHosts returns array of hostnames excluding myself
func GetRemoteHosts() []string {
	ret := make([]string, 0)

	mutex.RLock()
	defer mutex.RUnlock()

	for keyID, item := range nodes {
		if keyID != conf.Config.KeyID {
			ret = append(ret, item.TCPAddress)
		}
	}
	return ret
}

// SysString returns string value of the system parameter
func SysString(name string) string {
	mutex.RLock()
	ret := cache[name]
	mutex.RUnlock()
	return ret
}

// GetRbBlocks1 is returns RbBlocks1
func GetRbBlocks1() int64 {
	return SysInt64(RbBlocks1)
}

// HasSys returns boolean whether this system parameter exists
func HasSys(name string) bool {
	mutex.RLock()
	_, ok := cache[name]
	mutex.RUnlock()
	return ok
}

// SetFirstBlockData sets data of first block to global variable
func SetFirstBlockData(data *consts.FirstBlock) {
	mutex.Lock()
	defer mutex.Unlock()

	firstBlockData = data

	// If list of nodes is empty, then used node from the first block
	if len(nodesByPosition) == 0 {
		keyID := crypto.Address(firstBlockData.PublicKey)
		addFullNodeKeys(keyID, firstBlockData.NodePublicKey)
	}
}

// GetFirstBlockData gets data of first block from global variable
func GetFirstBlockData() (*consts.FirstBlock, error) {
	mutex.RLock()
	defer mutex.RUnlock()

	if firstBlockData == nil {
		return nil, errFirstBlockData
	}

	return firstBlockData, nil
}
import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strconv"

	"github.com/BurntSushi/toml"
	"github.com/pkg/errors"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/viper"

	"github.com/GenesisKernel/go-genesis/packages/consts"
)

// HostPort endpoint in form "str:int"
type HostPort struct {
	Host string // ipaddr, hostname, or "0.0.0.0"
	Port int    // must be in range 1..65535
}

// Str converts HostPort pair to string format
func (h HostPort) Str() string {
	return fmt.Sprintf("%s:%d", h.Host, h.Port)
}

// DBConfig database connection parameters
type DBConfig struct {
	Name     string
	Host     string // ipaddr, hostname, or "0.0.0.0"
	Port     int    // must be in range 1..65535
	User     string
	Password string
}

// StatsDConfig statd connection parameters
type StatsDConfig struct {
	Host string // ipaddr, hostname, or "0.0.0.0"
	Port int    // must be in range 1..65535
	Name string
}

// CentrifugoConfig connection params
type CentrifugoConfig struct {
	Secret string
	URL    string
}

// Syslog represents parameters of syslog
type Syslog struct {
	Facility string
	Tag      string
}

// Log represents parameters of log
type LogConfig struct {
	LogTo     string
	LogLevel  string
	LogFormat string
	Syslog    Syslog
}

// TokenMovementConfig smtp config for token movement
type TokenMovementConfig struct {
	Host     string
	Port     int
	Username string
	Password string
	To       string
	From     string
	Subject  string
}

// GlobalConfig is storing all startup config as global struct
type GlobalConfig struct {
	KeyID        int64  `toml:"-"`
	ConfigPath   string `toml:"-"`
	TestRollBack bool   `toml:"-"`

	PrivateBlockchain bool
	PidFilePath       string
	LockFilePath      string
	DataDir           string // application work dir (cwd by default)
	KeysDir           string // place for private keys files: NodePrivateKey, PrivateKey
	TempDir           string // temporary dir
	FirstBlockPath    string
	TLS               bool   // TLS is on/off. It is required for https
	TLSCert           string // TLSCert is a filepath of the fullchain of certificate.
	TLSKey            string // TLSKey is a filepath of the private key.
	RunningMode       string

	MaxPageGenerationTime int64 // in milliseconds

	TCPServer HostPort
	HTTP      HostPort

	DB            DBConfig
	StatsD        StatsDConfig
	Centrifugo    CentrifugoConfig
	Log           LogConfig
	TokenMovement TokenMovementConfig

	NodesAddr []string
}

// Config global parameters
var Config GlobalConfig

// GetPidPath returns path to pid file
func (c *GlobalConfig) GetPidPath() string {
	return c.PidFilePath
}

// LoadConfig from configFile
// the function has side effect updating global var Config
func LoadConfig(path string) error {
	log.WithFields(log.Fields{"path": path}).Info("Loading config")

	_, err := os.Stat(path)
	if os.IsNotExist(err) {
		return errors.Errorf("Unable to load config file %s", path)
	}

	viper.SetConfigFile(path)
	err = viper.ReadInConfig()
	if err != nil {
		return errors.Wrapf(err, "reading config")
	}

	err = viper.Unmarshal(&Config)
	if err != nil {
		return errors.Wrapf(err, "marshalling config to global struct variable")
	}
	return nil
}

// GetConfigFromPath read config from path and returns GlobalConfig struct
func GetConfigFromPath(path string) (*GlobalConfig, error) {
	log.WithFields(log.Fields{"path": path}).Info("Loading config")

	_, err := os.Stat(path)
	if os.IsNotExist(err) {
		return nil, errors.Errorf("Unable to load config file %s", path)
	}

	viper.SetConfigFile(path)
	err = viper.ReadInConfig()
	if err != nil {
		return nil, errors.Wrapf(err, "reading config")
	}

	c := &GlobalConfig{}
	err = viper.Unmarshal(c)
	if err != nil {
		return c, errors.Wrapf(err, "marshalling config to global struct variable")
	}

	return c, nil
}

// SaveConfig save global parameters to configFile
func SaveConfig(path string) error {
	dir := filepath.Dir(path)
	if _, err := os.Stat(dir); os.IsNotExist(err) {
		err := os.Mkdir(dir, 0775)
		if err != nil {
			return errors.Wrapf(err, "creating dir %s", dir)
		}
	}

	cf, err := os.Create(path)
	if err != nil {
		log.WithFields(log.Fields{"type": consts.IOError, "error": err}).Error("Create config file failed")
		return err
	}
	defer cf.Close()

	err = toml.NewEncoder(cf).Encode(Config)
	if err != nil {
		return err
	}
	return nil
}

// FillRuntimePaths fills paths from runtime parameters
func FillRuntimePaths() error {
	if Config.DataDir == "" {
		cwd, err := os.Getwd()
		if err != nil {
			return errors.Wrapf(err, "getting current wd")
		}

		Config.DataDir = filepath.Join(cwd, consts.DefaultWorkdirName)
	}

	if Config.KeysDir == "" {
		Config.KeysDir = Config.DataDir
	}

	if Config.TempDir == "" {
		Config.TempDir = filepath.Join(os.TempDir(), consts.DefaultTempDirName)
	}

	if Config.FirstBlockPath == "" {
		Config.FirstBlockPath = filepath.Join(Config.DataDir, consts.FirstBlockFilename)
	}

	if Config.PidFilePath == "" {
		Config.PidFilePath = filepath.Join(Config.DataDir, consts.DefaultPidFilename)
	}

	if Config.LockFilePath == "" {
		Config.LockFilePath = filepath.Join(Config.DataDir, consts.DefaultLockFilename)
	}

	return nil
}

// FillRuntimeKey fills parameters of keys from runtime parameters
func FillRuntimeKey() error {
	keyIDFileName := filepath.Join(Config.KeysDir, consts.KeyIDFilename)
	keyIDBytes, err := ioutil.ReadFile(keyIDFileName)
	if err != nil {
		log.WithFields(log.Fields{"type": consts.IOError, "error": err, "path": keyIDFileName}).Fatal("reading KeyID file")
		return err
	}

	Config.KeyID, err = strconv.ParseInt(string(keyIDBytes), 10, 64)
	if err != nil {
		log.WithFields(log.Fields{"type": consts.ConversionError, "error": err, "value": string(keyIDBytes)}).Fatal("converting keyID to int")
		return errors.New("converting keyID to int")
	}

	return nil
}

// GetNodesAddr returns addreses of nodes
func GetNodesAddr() []string {
	return Config.NodesAddr[:]
}

// IsPrivateBlockchain check running mode
func (c GlobalConfig) IsPrivateBlockchain() bool {
	return RunMode(c.RunningMode).IsPrivateBlockchain()
}

// IsPublicBlockchain check running mode
func (c GlobalConfig) IsPublicBlockchain() bool {
	return RunMode(c.RunningMode).IsPublicBlockchain()
}

// IsVDE check running mode
func (c GlobalConfig) IsVDE() bool {
	return RunMode(c.RunningMode).IsVDE()
}

// IsVDEMaster check running mode
func (c GlobalConfig) IsVDEMaster() bool {
	return RunMode(c.RunningMode).IsVDEMaster()
}

// IsSupportingVDE check running mode
func (c GlobalConfig) IsSupportingVDE() bool {
	return RunMode(c.RunningMode).IsSupportingVDE()
}

// PrivateBlockchain const label for running mode
const privateBlockchain RunMode = "PrivateBlockchain"

// PublicBlockchain const label for running mode
const publicBlockchain RunMode = "PublicBlockchain"

// VDEManager const label for running mode
const vdeMaster RunMode = "VDEMaster"

// VDE const label for running mode
const vde RunMode = "VDE"

type RunMode string

// IsPublicBlockchain returns true if mode equal PublicBlockchain
func (rm RunMode) IsPublicBlockchain() bool {
	return rm == publicBlockchain
}

// IsPrivateBlockchain returns true if mode equal PrivateBlockchain
func (rm RunMode) IsPrivateBlockchain() bool {
	return rm == privateBlockchain
}

// IsVDEMaster returns true if mode equal vdeMaster
func (rm RunMode) IsVDEMaster() bool {
	return rm == vdeMaster
}

// IsVDE returns true if mode equal vde
func (rm RunMode) IsVDE() bool {
	return rm == vde
}

// IsSupportingVDE returns true if mode support vde
func (rm RunMode) IsSupportingVDE() bool {
	return rm.IsVDE() || rm.IsVDEMaster()
}